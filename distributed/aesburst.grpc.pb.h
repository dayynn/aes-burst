// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: aesburst.proto
#ifndef GRPC_aesburst_2eproto__INCLUDED
#define GRPC_aesburst_2eproto__INCLUDED

#include "aesburst.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class CompletionQueue;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc

namespace aesburst {

class AESBurstManager final {
 public:
  static constexpr char const* service_full_name() {
    return "aesburst.AESBurstManager";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // The user facing request that any frontend can query
    virtual ::grpc::Status BruteForce(::grpc::ClientContext* context, const ::aesburst::BruteForceRequest& request, ::aesburst::BruteForceReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::aesburst::BruteForceReply>> AsyncBruteForce(::grpc::ClientContext* context, const ::aesburst::BruteForceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::aesburst::BruteForceReply>>(AsyncBruteForceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::aesburst::BruteForceReply>> PrepareAsyncBruteForce(::grpc::ClientContext* context, const ::aesburst::BruteForceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::aesburst::BruteForceReply>>(PrepareAsyncBruteForceRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // The user facing request that any frontend can query
      virtual void BruteForce(::grpc::ClientContext* context, const ::aesburst::BruteForceRequest* request, ::aesburst::BruteForceReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void BruteForce(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::aesburst::BruteForceReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void BruteForce(::grpc::ClientContext* context, const ::aesburst::BruteForceRequest* request, ::aesburst::BruteForceReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void BruteForce(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::aesburst::BruteForceReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::aesburst::BruteForceReply>* AsyncBruteForceRaw(::grpc::ClientContext* context, const ::aesburst::BruteForceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::aesburst::BruteForceReply>* PrepareAsyncBruteForceRaw(::grpc::ClientContext* context, const ::aesburst::BruteForceRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status BruteForce(::grpc::ClientContext* context, const ::aesburst::BruteForceRequest& request, ::aesburst::BruteForceReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::aesburst::BruteForceReply>> AsyncBruteForce(::grpc::ClientContext* context, const ::aesburst::BruteForceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::aesburst::BruteForceReply>>(AsyncBruteForceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::aesburst::BruteForceReply>> PrepareAsyncBruteForce(::grpc::ClientContext* context, const ::aesburst::BruteForceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::aesburst::BruteForceReply>>(PrepareAsyncBruteForceRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void BruteForce(::grpc::ClientContext* context, const ::aesburst::BruteForceRequest* request, ::aesburst::BruteForceReply* response, std::function<void(::grpc::Status)>) override;
      void BruteForce(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::aesburst::BruteForceReply* response, std::function<void(::grpc::Status)>) override;
      void BruteForce(::grpc::ClientContext* context, const ::aesburst::BruteForceRequest* request, ::aesburst::BruteForceReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void BruteForce(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::aesburst::BruteForceReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::aesburst::BruteForceReply>* AsyncBruteForceRaw(::grpc::ClientContext* context, const ::aesburst::BruteForceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::aesburst::BruteForceReply>* PrepareAsyncBruteForceRaw(::grpc::ClientContext* context, const ::aesburst::BruteForceRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_BruteForce_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // The user facing request that any frontend can query
    virtual ::grpc::Status BruteForce(::grpc::ServerContext* context, const ::aesburst::BruteForceRequest* request, ::aesburst::BruteForceReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_BruteForce : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_BruteForce() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_BruteForce() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BruteForce(::grpc::ServerContext* context, const ::aesburst::BruteForceRequest* request, ::aesburst::BruteForceReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBruteForce(::grpc::ServerContext* context, ::aesburst::BruteForceRequest* request, ::grpc::ServerAsyncResponseWriter< ::aesburst::BruteForceReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_BruteForce<Service > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_BruteForce : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_BruteForce() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::aesburst::BruteForceRequest, ::aesburst::BruteForceReply>(
          [this](::grpc::ServerContext* context,
                 const ::aesburst::BruteForceRequest* request,
                 ::aesburst::BruteForceReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->BruteForce(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_BruteForce(
        ::grpc::experimental::MessageAllocator< ::aesburst::BruteForceRequest, ::aesburst::BruteForceReply>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::aesburst::BruteForceRequest, ::aesburst::BruteForceReply>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_BruteForce() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BruteForce(::grpc::ServerContext* context, const ::aesburst::BruteForceRequest* request, ::aesburst::BruteForceReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void BruteForce(::grpc::ServerContext* context, const ::aesburst::BruteForceRequest* request, ::aesburst::BruteForceReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_BruteForce<Service > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_BruteForce : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_BruteForce() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_BruteForce() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BruteForce(::grpc::ServerContext* context, const ::aesburst::BruteForceRequest* request, ::aesburst::BruteForceReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_BruteForce : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_BruteForce() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_BruteForce() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BruteForce(::grpc::ServerContext* context, const ::aesburst::BruteForceRequest* request, ::aesburst::BruteForceReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBruteForce(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_BruteForce : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_BruteForce() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->BruteForce(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_BruteForce() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BruteForce(::grpc::ServerContext* context, const ::aesburst::BruteForceRequest* request, ::aesburst::BruteForceReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void BruteForce(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_BruteForce : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_BruteForce() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::aesburst::BruteForceRequest, ::aesburst::BruteForceReply>(std::bind(&WithStreamedUnaryMethod_BruteForce<BaseClass>::StreamedBruteForce, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_BruteForce() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status BruteForce(::grpc::ServerContext* context, const ::aesburst::BruteForceRequest* request, ::aesburst::BruteForceReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedBruteForce(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::aesburst::BruteForceRequest,::aesburst::BruteForceReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_BruteForce<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_BruteForce<Service > StreamedService;
};

class AESBurstWorker final {
 public:
  static constexpr char const* service_full_name() {
    return "aesburst.AESBurstWorker";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Interface for the server to send the partial requests to the client
    // TODO: look into streaming the ciphertexts and keys because they are a ton of data
    virtual ::grpc::Status BruteECB(::grpc::ClientContext* context, const ::aesburst::PartialBruteRequest& request, ::aesburst::PartialBruteReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::aesburst::PartialBruteReply>> AsyncBruteECB(::grpc::ClientContext* context, const ::aesburst::PartialBruteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::aesburst::PartialBruteReply>>(AsyncBruteECBRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::aesburst::PartialBruteReply>> PrepareAsyncBruteECB(::grpc::ClientContext* context, const ::aesburst::PartialBruteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::aesburst::PartialBruteReply>>(PrepareAsyncBruteECBRaw(context, request, cq));
    }
    virtual ::grpc::Status BruteCBC(::grpc::ClientContext* context, const ::aesburst::PartialBruteRequest& request, ::aesburst::PartialBruteReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::aesburst::PartialBruteReply>> AsyncBruteCBC(::grpc::ClientContext* context, const ::aesburst::PartialBruteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::aesburst::PartialBruteReply>>(AsyncBruteCBCRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::aesburst::PartialBruteReply>> PrepareAsyncBruteCBC(::grpc::ClientContext* context, const ::aesburst::PartialBruteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::aesburst::PartialBruteReply>>(PrepareAsyncBruteCBCRaw(context, request, cq));
    }
    virtual ::grpc::Status BruteCTR(::grpc::ClientContext* context, const ::aesburst::PartialBruteRequest& request, ::aesburst::PartialBruteReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::aesburst::PartialBruteReply>> AsyncBruteCTR(::grpc::ClientContext* context, const ::aesburst::PartialBruteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::aesburst::PartialBruteReply>>(AsyncBruteCTRRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::aesburst::PartialBruteReply>> PrepareAsyncBruteCTR(::grpc::ClientContext* context, const ::aesburst::PartialBruteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::aesburst::PartialBruteReply>>(PrepareAsyncBruteCTRRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Interface for the server to send the partial requests to the client
      // TODO: look into streaming the ciphertexts and keys because they are a ton of data
      virtual void BruteECB(::grpc::ClientContext* context, const ::aesburst::PartialBruteRequest* request, ::aesburst::PartialBruteReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void BruteECB(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::aesburst::PartialBruteReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void BruteECB(::grpc::ClientContext* context, const ::aesburst::PartialBruteRequest* request, ::aesburst::PartialBruteReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void BruteECB(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::aesburst::PartialBruteReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void BruteCBC(::grpc::ClientContext* context, const ::aesburst::PartialBruteRequest* request, ::aesburst::PartialBruteReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void BruteCBC(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::aesburst::PartialBruteReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void BruteCBC(::grpc::ClientContext* context, const ::aesburst::PartialBruteRequest* request, ::aesburst::PartialBruteReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void BruteCBC(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::aesburst::PartialBruteReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void BruteCTR(::grpc::ClientContext* context, const ::aesburst::PartialBruteRequest* request, ::aesburst::PartialBruteReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void BruteCTR(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::aesburst::PartialBruteReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void BruteCTR(::grpc::ClientContext* context, const ::aesburst::PartialBruteRequest* request, ::aesburst::PartialBruteReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void BruteCTR(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::aesburst::PartialBruteReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::aesburst::PartialBruteReply>* AsyncBruteECBRaw(::grpc::ClientContext* context, const ::aesburst::PartialBruteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::aesburst::PartialBruteReply>* PrepareAsyncBruteECBRaw(::grpc::ClientContext* context, const ::aesburst::PartialBruteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::aesburst::PartialBruteReply>* AsyncBruteCBCRaw(::grpc::ClientContext* context, const ::aesburst::PartialBruteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::aesburst::PartialBruteReply>* PrepareAsyncBruteCBCRaw(::grpc::ClientContext* context, const ::aesburst::PartialBruteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::aesburst::PartialBruteReply>* AsyncBruteCTRRaw(::grpc::ClientContext* context, const ::aesburst::PartialBruteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::aesburst::PartialBruteReply>* PrepareAsyncBruteCTRRaw(::grpc::ClientContext* context, const ::aesburst::PartialBruteRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status BruteECB(::grpc::ClientContext* context, const ::aesburst::PartialBruteRequest& request, ::aesburst::PartialBruteReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::aesburst::PartialBruteReply>> AsyncBruteECB(::grpc::ClientContext* context, const ::aesburst::PartialBruteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::aesburst::PartialBruteReply>>(AsyncBruteECBRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::aesburst::PartialBruteReply>> PrepareAsyncBruteECB(::grpc::ClientContext* context, const ::aesburst::PartialBruteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::aesburst::PartialBruteReply>>(PrepareAsyncBruteECBRaw(context, request, cq));
    }
    ::grpc::Status BruteCBC(::grpc::ClientContext* context, const ::aesburst::PartialBruteRequest& request, ::aesburst::PartialBruteReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::aesburst::PartialBruteReply>> AsyncBruteCBC(::grpc::ClientContext* context, const ::aesburst::PartialBruteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::aesburst::PartialBruteReply>>(AsyncBruteCBCRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::aesburst::PartialBruteReply>> PrepareAsyncBruteCBC(::grpc::ClientContext* context, const ::aesburst::PartialBruteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::aesburst::PartialBruteReply>>(PrepareAsyncBruteCBCRaw(context, request, cq));
    }
    ::grpc::Status BruteCTR(::grpc::ClientContext* context, const ::aesburst::PartialBruteRequest& request, ::aesburst::PartialBruteReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::aesburst::PartialBruteReply>> AsyncBruteCTR(::grpc::ClientContext* context, const ::aesburst::PartialBruteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::aesburst::PartialBruteReply>>(AsyncBruteCTRRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::aesburst::PartialBruteReply>> PrepareAsyncBruteCTR(::grpc::ClientContext* context, const ::aesburst::PartialBruteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::aesburst::PartialBruteReply>>(PrepareAsyncBruteCTRRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void BruteECB(::grpc::ClientContext* context, const ::aesburst::PartialBruteRequest* request, ::aesburst::PartialBruteReply* response, std::function<void(::grpc::Status)>) override;
      void BruteECB(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::aesburst::PartialBruteReply* response, std::function<void(::grpc::Status)>) override;
      void BruteECB(::grpc::ClientContext* context, const ::aesburst::PartialBruteRequest* request, ::aesburst::PartialBruteReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void BruteECB(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::aesburst::PartialBruteReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void BruteCBC(::grpc::ClientContext* context, const ::aesburst::PartialBruteRequest* request, ::aesburst::PartialBruteReply* response, std::function<void(::grpc::Status)>) override;
      void BruteCBC(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::aesburst::PartialBruteReply* response, std::function<void(::grpc::Status)>) override;
      void BruteCBC(::grpc::ClientContext* context, const ::aesburst::PartialBruteRequest* request, ::aesburst::PartialBruteReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void BruteCBC(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::aesburst::PartialBruteReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void BruteCTR(::grpc::ClientContext* context, const ::aesburst::PartialBruteRequest* request, ::aesburst::PartialBruteReply* response, std::function<void(::grpc::Status)>) override;
      void BruteCTR(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::aesburst::PartialBruteReply* response, std::function<void(::grpc::Status)>) override;
      void BruteCTR(::grpc::ClientContext* context, const ::aesburst::PartialBruteRequest* request, ::aesburst::PartialBruteReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void BruteCTR(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::aesburst::PartialBruteReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::aesburst::PartialBruteReply>* AsyncBruteECBRaw(::grpc::ClientContext* context, const ::aesburst::PartialBruteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::aesburst::PartialBruteReply>* PrepareAsyncBruteECBRaw(::grpc::ClientContext* context, const ::aesburst::PartialBruteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::aesburst::PartialBruteReply>* AsyncBruteCBCRaw(::grpc::ClientContext* context, const ::aesburst::PartialBruteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::aesburst::PartialBruteReply>* PrepareAsyncBruteCBCRaw(::grpc::ClientContext* context, const ::aesburst::PartialBruteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::aesburst::PartialBruteReply>* AsyncBruteCTRRaw(::grpc::ClientContext* context, const ::aesburst::PartialBruteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::aesburst::PartialBruteReply>* PrepareAsyncBruteCTRRaw(::grpc::ClientContext* context, const ::aesburst::PartialBruteRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_BruteECB_;
    const ::grpc::internal::RpcMethod rpcmethod_BruteCBC_;
    const ::grpc::internal::RpcMethod rpcmethod_BruteCTR_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Interface for the server to send the partial requests to the client
    // TODO: look into streaming the ciphertexts and keys because they are a ton of data
    virtual ::grpc::Status BruteECB(::grpc::ServerContext* context, const ::aesburst::PartialBruteRequest* request, ::aesburst::PartialBruteReply* response);
    virtual ::grpc::Status BruteCBC(::grpc::ServerContext* context, const ::aesburst::PartialBruteRequest* request, ::aesburst::PartialBruteReply* response);
    virtual ::grpc::Status BruteCTR(::grpc::ServerContext* context, const ::aesburst::PartialBruteRequest* request, ::aesburst::PartialBruteReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_BruteECB : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_BruteECB() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_BruteECB() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BruteECB(::grpc::ServerContext* context, const ::aesburst::PartialBruteRequest* request, ::aesburst::PartialBruteReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBruteECB(::grpc::ServerContext* context, ::aesburst::PartialBruteRequest* request, ::grpc::ServerAsyncResponseWriter< ::aesburst::PartialBruteReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_BruteCBC : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_BruteCBC() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_BruteCBC() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BruteCBC(::grpc::ServerContext* context, const ::aesburst::PartialBruteRequest* request, ::aesburst::PartialBruteReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBruteCBC(::grpc::ServerContext* context, ::aesburst::PartialBruteRequest* request, ::grpc::ServerAsyncResponseWriter< ::aesburst::PartialBruteReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_BruteCTR : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_BruteCTR() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_BruteCTR() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BruteCTR(::grpc::ServerContext* context, const ::aesburst::PartialBruteRequest* request, ::aesburst::PartialBruteReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBruteCTR(::grpc::ServerContext* context, ::aesburst::PartialBruteRequest* request, ::grpc::ServerAsyncResponseWriter< ::aesburst::PartialBruteReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_BruteECB<WithAsyncMethod_BruteCBC<WithAsyncMethod_BruteCTR<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_BruteECB : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_BruteECB() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::aesburst::PartialBruteRequest, ::aesburst::PartialBruteReply>(
          [this](::grpc::ServerContext* context,
                 const ::aesburst::PartialBruteRequest* request,
                 ::aesburst::PartialBruteReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->BruteECB(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_BruteECB(
        ::grpc::experimental::MessageAllocator< ::aesburst::PartialBruteRequest, ::aesburst::PartialBruteReply>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::aesburst::PartialBruteRequest, ::aesburst::PartialBruteReply>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_BruteECB() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BruteECB(::grpc::ServerContext* context, const ::aesburst::PartialBruteRequest* request, ::aesburst::PartialBruteReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void BruteECB(::grpc::ServerContext* context, const ::aesburst::PartialBruteRequest* request, ::aesburst::PartialBruteReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_BruteCBC : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_BruteCBC() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::aesburst::PartialBruteRequest, ::aesburst::PartialBruteReply>(
          [this](::grpc::ServerContext* context,
                 const ::aesburst::PartialBruteRequest* request,
                 ::aesburst::PartialBruteReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->BruteCBC(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_BruteCBC(
        ::grpc::experimental::MessageAllocator< ::aesburst::PartialBruteRequest, ::aesburst::PartialBruteReply>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::aesburst::PartialBruteRequest, ::aesburst::PartialBruteReply>*>(
          ::grpc::Service::experimental().GetHandler(1))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_BruteCBC() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BruteCBC(::grpc::ServerContext* context, const ::aesburst::PartialBruteRequest* request, ::aesburst::PartialBruteReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void BruteCBC(::grpc::ServerContext* context, const ::aesburst::PartialBruteRequest* request, ::aesburst::PartialBruteReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_BruteCTR : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_BruteCTR() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::aesburst::PartialBruteRequest, ::aesburst::PartialBruteReply>(
          [this](::grpc::ServerContext* context,
                 const ::aesburst::PartialBruteRequest* request,
                 ::aesburst::PartialBruteReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->BruteCTR(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_BruteCTR(
        ::grpc::experimental::MessageAllocator< ::aesburst::PartialBruteRequest, ::aesburst::PartialBruteReply>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::aesburst::PartialBruteRequest, ::aesburst::PartialBruteReply>*>(
          ::grpc::Service::experimental().GetHandler(2))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_BruteCTR() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BruteCTR(::grpc::ServerContext* context, const ::aesburst::PartialBruteRequest* request, ::aesburst::PartialBruteReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void BruteCTR(::grpc::ServerContext* context, const ::aesburst::PartialBruteRequest* request, ::aesburst::PartialBruteReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_BruteECB<ExperimentalWithCallbackMethod_BruteCBC<ExperimentalWithCallbackMethod_BruteCTR<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_BruteECB : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_BruteECB() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_BruteECB() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BruteECB(::grpc::ServerContext* context, const ::aesburst::PartialBruteRequest* request, ::aesburst::PartialBruteReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_BruteCBC : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_BruteCBC() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_BruteCBC() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BruteCBC(::grpc::ServerContext* context, const ::aesburst::PartialBruteRequest* request, ::aesburst::PartialBruteReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_BruteCTR : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_BruteCTR() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_BruteCTR() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BruteCTR(::grpc::ServerContext* context, const ::aesburst::PartialBruteRequest* request, ::aesburst::PartialBruteReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_BruteECB : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_BruteECB() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_BruteECB() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BruteECB(::grpc::ServerContext* context, const ::aesburst::PartialBruteRequest* request, ::aesburst::PartialBruteReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBruteECB(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_BruteCBC : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_BruteCBC() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_BruteCBC() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BruteCBC(::grpc::ServerContext* context, const ::aesburst::PartialBruteRequest* request, ::aesburst::PartialBruteReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBruteCBC(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_BruteCTR : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_BruteCTR() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_BruteCTR() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BruteCTR(::grpc::ServerContext* context, const ::aesburst::PartialBruteRequest* request, ::aesburst::PartialBruteReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBruteCTR(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_BruteECB : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_BruteECB() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->BruteECB(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_BruteECB() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BruteECB(::grpc::ServerContext* context, const ::aesburst::PartialBruteRequest* request, ::aesburst::PartialBruteReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void BruteECB(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_BruteCBC : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_BruteCBC() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->BruteCBC(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_BruteCBC() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BruteCBC(::grpc::ServerContext* context, const ::aesburst::PartialBruteRequest* request, ::aesburst::PartialBruteReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void BruteCBC(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_BruteCTR : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_BruteCTR() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->BruteCTR(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_BruteCTR() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BruteCTR(::grpc::ServerContext* context, const ::aesburst::PartialBruteRequest* request, ::aesburst::PartialBruteReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void BruteCTR(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_BruteECB : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_BruteECB() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::aesburst::PartialBruteRequest, ::aesburst::PartialBruteReply>(std::bind(&WithStreamedUnaryMethod_BruteECB<BaseClass>::StreamedBruteECB, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_BruteECB() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status BruteECB(::grpc::ServerContext* context, const ::aesburst::PartialBruteRequest* request, ::aesburst::PartialBruteReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedBruteECB(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::aesburst::PartialBruteRequest,::aesburst::PartialBruteReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_BruteCBC : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_BruteCBC() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::aesburst::PartialBruteRequest, ::aesburst::PartialBruteReply>(std::bind(&WithStreamedUnaryMethod_BruteCBC<BaseClass>::StreamedBruteCBC, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_BruteCBC() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status BruteCBC(::grpc::ServerContext* context, const ::aesburst::PartialBruteRequest* request, ::aesburst::PartialBruteReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedBruteCBC(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::aesburst::PartialBruteRequest,::aesburst::PartialBruteReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_BruteCTR : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_BruteCTR() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::aesburst::PartialBruteRequest, ::aesburst::PartialBruteReply>(std::bind(&WithStreamedUnaryMethod_BruteCTR<BaseClass>::StreamedBruteCTR, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_BruteCTR() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status BruteCTR(::grpc::ServerContext* context, const ::aesburst::PartialBruteRequest* request, ::aesburst::PartialBruteReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedBruteCTR(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::aesburst::PartialBruteRequest,::aesburst::PartialBruteReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_BruteECB<WithStreamedUnaryMethod_BruteCBC<WithStreamedUnaryMethod_BruteCTR<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_BruteECB<WithStreamedUnaryMethod_BruteCBC<WithStreamedUnaryMethod_BruteCTR<Service > > > StreamedService;
};

}  // namespace aesburst


#endif  // GRPC_aesburst_2eproto__INCLUDED
