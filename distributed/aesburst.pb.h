// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aesburst.proto

#ifndef PROTOBUF_INCLUDED_aesburst_2eproto
#define PROTOBUF_INCLUDED_aesburst_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_aesburst_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_aesburst_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_aesburst_2eproto();
namespace aesburst {
class BruteForceReply;
class BruteForceReplyDefaultTypeInternal;
extern BruteForceReplyDefaultTypeInternal _BruteForceReply_default_instance_;
class BruteForceRequest;
class BruteForceRequestDefaultTypeInternal;
extern BruteForceRequestDefaultTypeInternal _BruteForceRequest_default_instance_;
class PartialBruteReply;
class PartialBruteReplyDefaultTypeInternal;
extern PartialBruteReplyDefaultTypeInternal _PartialBruteReply_default_instance_;
class PartialBruteRequest;
class PartialBruteRequestDefaultTypeInternal;
extern PartialBruteRequestDefaultTypeInternal _PartialBruteRequest_default_instance_;
}  // namespace aesburst
namespace google {
namespace protobuf {
template<> ::aesburst::BruteForceReply* Arena::CreateMaybeMessage<::aesburst::BruteForceReply>(Arena*);
template<> ::aesburst::BruteForceRequest* Arena::CreateMaybeMessage<::aesburst::BruteForceRequest>(Arena*);
template<> ::aesburst::PartialBruteReply* Arena::CreateMaybeMessage<::aesburst::PartialBruteReply>(Arena*);
template<> ::aesburst::PartialBruteRequest* Arena::CreateMaybeMessage<::aesburst::PartialBruteRequest>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace aesburst {

enum BruteForceRequest_Mode {
  BruteForceRequest_Mode_ECB = 0,
  BruteForceRequest_Mode_CBC = 1,
  BruteForceRequest_Mode_CTR = 2,
  BruteForceRequest_Mode_ALL = 3,
  BruteForceRequest_Mode_BruteForceRequest_Mode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  BruteForceRequest_Mode_BruteForceRequest_Mode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool BruteForceRequest_Mode_IsValid(int value);
const BruteForceRequest_Mode BruteForceRequest_Mode_Mode_MIN = BruteForceRequest_Mode_ECB;
const BruteForceRequest_Mode BruteForceRequest_Mode_Mode_MAX = BruteForceRequest_Mode_ALL;
const int BruteForceRequest_Mode_Mode_ARRAYSIZE = BruteForceRequest_Mode_Mode_MAX + 1;

const ::google::protobuf::EnumDescriptor* BruteForceRequest_Mode_descriptor();
inline const ::std::string& BruteForceRequest_Mode_Name(BruteForceRequest_Mode value) {
  return ::google::protobuf::internal::NameOfEnum(
    BruteForceRequest_Mode_descriptor(), value);
}
inline bool BruteForceRequest_Mode_Parse(
    const ::std::string& name, BruteForceRequest_Mode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BruteForceRequest_Mode>(
    BruteForceRequest_Mode_descriptor(), name, value);
}
// ===================================================================

class BruteForceRequest :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:aesburst.BruteForceRequest) */ {
 public:
  BruteForceRequest();
  virtual ~BruteForceRequest();

  BruteForceRequest(const BruteForceRequest& from);

  inline BruteForceRequest& operator=(const BruteForceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BruteForceRequest(BruteForceRequest&& from) noexcept
    : BruteForceRequest() {
    *this = ::std::move(from);
  }

  inline BruteForceRequest& operator=(BruteForceRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const BruteForceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BruteForceRequest* internal_default_instance() {
    return reinterpret_cast<const BruteForceRequest*>(
               &_BruteForceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(BruteForceRequest* other);
  friend void swap(BruteForceRequest& a, BruteForceRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BruteForceRequest* New() const final {
    return CreateMaybeMessage<BruteForceRequest>(nullptr);
  }

  BruteForceRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BruteForceRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BruteForceRequest& from);
  void MergeFrom(const BruteForceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BruteForceRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef BruteForceRequest_Mode Mode;
  static const Mode ECB =
    BruteForceRequest_Mode_ECB;
  static const Mode CBC =
    BruteForceRequest_Mode_CBC;
  static const Mode CTR =
    BruteForceRequest_Mode_CTR;
  static const Mode ALL =
    BruteForceRequest_Mode_ALL;
  static inline bool Mode_IsValid(int value) {
    return BruteForceRequest_Mode_IsValid(value);
  }
  static const Mode Mode_MIN =
    BruteForceRequest_Mode_Mode_MIN;
  static const Mode Mode_MAX =
    BruteForceRequest_Mode_Mode_MAX;
  static const int Mode_ARRAYSIZE =
    BruteForceRequest_Mode_Mode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Mode_descriptor() {
    return BruteForceRequest_Mode_descriptor();
  }
  static inline const ::std::string& Mode_Name(Mode value) {
    return BruteForceRequest_Mode_Name(value);
  }
  static inline bool Mode_Parse(const ::std::string& name,
      Mode* value) {
    return BruteForceRequest_Mode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated bytes ciphertexts = 4;
  int ciphertexts_size() const;
  void clear_ciphertexts();
  static const int kCiphertextsFieldNumber = 4;
  const ::std::string& ciphertexts(int index) const;
  ::std::string* mutable_ciphertexts(int index);
  void set_ciphertexts(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_ciphertexts(int index, ::std::string&& value);
  #endif
  void set_ciphertexts(int index, const char* value);
  void set_ciphertexts(int index, const void* value, size_t size);
  ::std::string* add_ciphertexts();
  void add_ciphertexts(const ::std::string& value);
  #if LANG_CXX11
  void add_ciphertexts(::std::string&& value);
  #endif
  void add_ciphertexts(const char* value);
  void add_ciphertexts(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& ciphertexts() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_ciphertexts();

  // repeated bytes keys = 5;
  int keys_size() const;
  void clear_keys();
  static const int kKeysFieldNumber = 5;
  const ::std::string& keys(int index) const;
  ::std::string* mutable_keys(int index);
  void set_keys(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_keys(int index, ::std::string&& value);
  #endif
  void set_keys(int index, const char* value);
  void set_keys(int index, const void* value, size_t size);
  ::std::string* add_keys();
  void add_keys(const ::std::string& value);
  #if LANG_CXX11
  void add_keys(::std::string&& value);
  #endif
  void add_keys(const char* value);
  void add_keys(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& keys() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_keys();

  // string crib = 1;
  void clear_crib();
  static const int kCribFieldNumber = 1;
  const ::std::string& crib() const;
  void set_crib(const ::std::string& value);
  #if LANG_CXX11
  void set_crib(::std::string&& value);
  #endif
  void set_crib(const char* value);
  void set_crib(const char* value, size_t size);
  ::std::string* mutable_crib();
  ::std::string* release_crib();
  void set_allocated_crib(::std::string* crib);

  // bytes iv = 2;
  void clear_iv();
  static const int kIvFieldNumber = 2;
  const ::std::string& iv() const;
  void set_iv(const ::std::string& value);
  #if LANG_CXX11
  void set_iv(::std::string&& value);
  #endif
  void set_iv(const char* value);
  void set_iv(const void* value, size_t size);
  ::std::string* mutable_iv();
  ::std::string* release_iv();
  void set_allocated_iv(::std::string* iv);

  // .aesburst.BruteForceRequest.Mode mode = 3;
  void clear_mode();
  static const int kModeFieldNumber = 3;
  ::aesburst::BruteForceRequest_Mode mode() const;
  void set_mode(::aesburst::BruteForceRequest_Mode value);

  // @@protoc_insertion_point(class_scope:aesburst.BruteForceRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> ciphertexts_;
  ::google::protobuf::RepeatedPtrField<::std::string> keys_;
  ::google::protobuf::internal::ArenaStringPtr crib_;
  ::google::protobuf::internal::ArenaStringPtr iv_;
  int mode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_aesburst_2eproto;
};
// -------------------------------------------------------------------

class BruteForceReply :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:aesburst.BruteForceReply) */ {
 public:
  BruteForceReply();
  virtual ~BruteForceReply();

  BruteForceReply(const BruteForceReply& from);

  inline BruteForceReply& operator=(const BruteForceReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BruteForceReply(BruteForceReply&& from) noexcept
    : BruteForceReply() {
    *this = ::std::move(from);
  }

  inline BruteForceReply& operator=(BruteForceReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const BruteForceReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BruteForceReply* internal_default_instance() {
    return reinterpret_cast<const BruteForceReply*>(
               &_BruteForceReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(BruteForceReply* other);
  friend void swap(BruteForceReply& a, BruteForceReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BruteForceReply* New() const final {
    return CreateMaybeMessage<BruteForceReply>(nullptr);
  }

  BruteForceReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BruteForceReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BruteForceReply& from);
  void MergeFrom(const BruteForceReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BruteForceReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes candidate_keys = 1;
  int candidate_keys_size() const;
  void clear_candidate_keys();
  static const int kCandidateKeysFieldNumber = 1;
  const ::std::string& candidate_keys(int index) const;
  ::std::string* mutable_candidate_keys(int index);
  void set_candidate_keys(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_candidate_keys(int index, ::std::string&& value);
  #endif
  void set_candidate_keys(int index, const char* value);
  void set_candidate_keys(int index, const void* value, size_t size);
  ::std::string* add_candidate_keys();
  void add_candidate_keys(const ::std::string& value);
  #if LANG_CXX11
  void add_candidate_keys(::std::string&& value);
  #endif
  void add_candidate_keys(const char* value);
  void add_candidate_keys(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& candidate_keys() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_candidate_keys();

  // @@protoc_insertion_point(class_scope:aesburst.BruteForceReply)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> candidate_keys_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_aesburst_2eproto;
};
// -------------------------------------------------------------------

class PartialBruteRequest :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:aesburst.PartialBruteRequest) */ {
 public:
  PartialBruteRequest();
  virtual ~PartialBruteRequest();

  PartialBruteRequest(const PartialBruteRequest& from);

  inline PartialBruteRequest& operator=(const PartialBruteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PartialBruteRequest(PartialBruteRequest&& from) noexcept
    : PartialBruteRequest() {
    *this = ::std::move(from);
  }

  inline PartialBruteRequest& operator=(PartialBruteRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PartialBruteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PartialBruteRequest* internal_default_instance() {
    return reinterpret_cast<const PartialBruteRequest*>(
               &_PartialBruteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(PartialBruteRequest* other);
  friend void swap(PartialBruteRequest& a, PartialBruteRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PartialBruteRequest* New() const final {
    return CreateMaybeMessage<PartialBruteRequest>(nullptr);
  }

  PartialBruteRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PartialBruteRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PartialBruteRequest& from);
  void MergeFrom(const PartialBruteRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PartialBruteRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes keys = 2;
  int keys_size() const;
  void clear_keys();
  static const int kKeysFieldNumber = 2;
  const ::std::string& keys(int index) const;
  ::std::string* mutable_keys(int index);
  void set_keys(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_keys(int index, ::std::string&& value);
  #endif
  void set_keys(int index, const char* value);
  void set_keys(int index, const void* value, size_t size);
  ::std::string* add_keys();
  void add_keys(const ::std::string& value);
  #if LANG_CXX11
  void add_keys(::std::string&& value);
  #endif
  void add_keys(const char* value);
  void add_keys(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& keys() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_keys();

  // repeated bytes ciphertexts = 3;
  int ciphertexts_size() const;
  void clear_ciphertexts();
  static const int kCiphertextsFieldNumber = 3;
  const ::std::string& ciphertexts(int index) const;
  ::std::string* mutable_ciphertexts(int index);
  void set_ciphertexts(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_ciphertexts(int index, ::std::string&& value);
  #endif
  void set_ciphertexts(int index, const char* value);
  void set_ciphertexts(int index, const void* value, size_t size);
  ::std::string* add_ciphertexts();
  void add_ciphertexts(const ::std::string& value);
  #if LANG_CXX11
  void add_ciphertexts(::std::string&& value);
  #endif
  void add_ciphertexts(const char* value);
  void add_ciphertexts(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& ciphertexts() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_ciphertexts();

  // string crib = 1;
  void clear_crib();
  static const int kCribFieldNumber = 1;
  const ::std::string& crib() const;
  void set_crib(const ::std::string& value);
  #if LANG_CXX11
  void set_crib(::std::string&& value);
  #endif
  void set_crib(const char* value);
  void set_crib(const char* value, size_t size);
  ::std::string* mutable_crib();
  ::std::string* release_crib();
  void set_allocated_crib(::std::string* crib);

  // @@protoc_insertion_point(class_scope:aesburst.PartialBruteRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> keys_;
  ::google::protobuf::RepeatedPtrField<::std::string> ciphertexts_;
  ::google::protobuf::internal::ArenaStringPtr crib_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_aesburst_2eproto;
};
// -------------------------------------------------------------------

class PartialBruteReply :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:aesburst.PartialBruteReply) */ {
 public:
  PartialBruteReply();
  virtual ~PartialBruteReply();

  PartialBruteReply(const PartialBruteReply& from);

  inline PartialBruteReply& operator=(const PartialBruteReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PartialBruteReply(PartialBruteReply&& from) noexcept
    : PartialBruteReply() {
    *this = ::std::move(from);
  }

  inline PartialBruteReply& operator=(PartialBruteReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PartialBruteReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PartialBruteReply* internal_default_instance() {
    return reinterpret_cast<const PartialBruteReply*>(
               &_PartialBruteReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(PartialBruteReply* other);
  friend void swap(PartialBruteReply& a, PartialBruteReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PartialBruteReply* New() const final {
    return CreateMaybeMessage<PartialBruteReply>(nullptr);
  }

  PartialBruteReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PartialBruteReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PartialBruteReply& from);
  void MergeFrom(const PartialBruteReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PartialBruteReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes partial_candidate_keys = 1;
  int partial_candidate_keys_size() const;
  void clear_partial_candidate_keys();
  static const int kPartialCandidateKeysFieldNumber = 1;
  const ::std::string& partial_candidate_keys(int index) const;
  ::std::string* mutable_partial_candidate_keys(int index);
  void set_partial_candidate_keys(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_partial_candidate_keys(int index, ::std::string&& value);
  #endif
  void set_partial_candidate_keys(int index, const char* value);
  void set_partial_candidate_keys(int index, const void* value, size_t size);
  ::std::string* add_partial_candidate_keys();
  void add_partial_candidate_keys(const ::std::string& value);
  #if LANG_CXX11
  void add_partial_candidate_keys(::std::string&& value);
  #endif
  void add_partial_candidate_keys(const char* value);
  void add_partial_candidate_keys(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& partial_candidate_keys() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_partial_candidate_keys();

  // @@protoc_insertion_point(class_scope:aesburst.PartialBruteReply)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> partial_candidate_keys_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_aesburst_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BruteForceRequest

// string crib = 1;
inline void BruteForceRequest::clear_crib() {
  crib_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BruteForceRequest::crib() const {
  // @@protoc_insertion_point(field_get:aesburst.BruteForceRequest.crib)
  return crib_.GetNoArena();
}
inline void BruteForceRequest::set_crib(const ::std::string& value) {
  
  crib_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aesburst.BruteForceRequest.crib)
}
#if LANG_CXX11
inline void BruteForceRequest::set_crib(::std::string&& value) {
  
  crib_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aesburst.BruteForceRequest.crib)
}
#endif
inline void BruteForceRequest::set_crib(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  crib_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aesburst.BruteForceRequest.crib)
}
inline void BruteForceRequest::set_crib(const char* value, size_t size) {
  
  crib_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aesburst.BruteForceRequest.crib)
}
inline ::std::string* BruteForceRequest::mutable_crib() {
  
  // @@protoc_insertion_point(field_mutable:aesburst.BruteForceRequest.crib)
  return crib_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BruteForceRequest::release_crib() {
  // @@protoc_insertion_point(field_release:aesburst.BruteForceRequest.crib)
  
  return crib_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BruteForceRequest::set_allocated_crib(::std::string* crib) {
  if (crib != nullptr) {
    
  } else {
    
  }
  crib_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), crib);
  // @@protoc_insertion_point(field_set_allocated:aesburst.BruteForceRequest.crib)
}

// bytes iv = 2;
inline void BruteForceRequest::clear_iv() {
  iv_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BruteForceRequest::iv() const {
  // @@protoc_insertion_point(field_get:aesburst.BruteForceRequest.iv)
  return iv_.GetNoArena();
}
inline void BruteForceRequest::set_iv(const ::std::string& value) {
  
  iv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aesburst.BruteForceRequest.iv)
}
#if LANG_CXX11
inline void BruteForceRequest::set_iv(::std::string&& value) {
  
  iv_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aesburst.BruteForceRequest.iv)
}
#endif
inline void BruteForceRequest::set_iv(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  iv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aesburst.BruteForceRequest.iv)
}
inline void BruteForceRequest::set_iv(const void* value, size_t size) {
  
  iv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aesburst.BruteForceRequest.iv)
}
inline ::std::string* BruteForceRequest::mutable_iv() {
  
  // @@protoc_insertion_point(field_mutable:aesburst.BruteForceRequest.iv)
  return iv_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BruteForceRequest::release_iv() {
  // @@protoc_insertion_point(field_release:aesburst.BruteForceRequest.iv)
  
  return iv_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BruteForceRequest::set_allocated_iv(::std::string* iv) {
  if (iv != nullptr) {
    
  } else {
    
  }
  iv_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), iv);
  // @@protoc_insertion_point(field_set_allocated:aesburst.BruteForceRequest.iv)
}

// .aesburst.BruteForceRequest.Mode mode = 3;
inline void BruteForceRequest::clear_mode() {
  mode_ = 0;
}
inline ::aesburst::BruteForceRequest_Mode BruteForceRequest::mode() const {
  // @@protoc_insertion_point(field_get:aesburst.BruteForceRequest.mode)
  return static_cast< ::aesburst::BruteForceRequest_Mode >(mode_);
}
inline void BruteForceRequest::set_mode(::aesburst::BruteForceRequest_Mode value) {
  
  mode_ = value;
  // @@protoc_insertion_point(field_set:aesburst.BruteForceRequest.mode)
}

// repeated bytes ciphertexts = 4;
inline int BruteForceRequest::ciphertexts_size() const {
  return ciphertexts_.size();
}
inline void BruteForceRequest::clear_ciphertexts() {
  ciphertexts_.Clear();
}
inline const ::std::string& BruteForceRequest::ciphertexts(int index) const {
  // @@protoc_insertion_point(field_get:aesburst.BruteForceRequest.ciphertexts)
  return ciphertexts_.Get(index);
}
inline ::std::string* BruteForceRequest::mutable_ciphertexts(int index) {
  // @@protoc_insertion_point(field_mutable:aesburst.BruteForceRequest.ciphertexts)
  return ciphertexts_.Mutable(index);
}
inline void BruteForceRequest::set_ciphertexts(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:aesburst.BruteForceRequest.ciphertexts)
  ciphertexts_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void BruteForceRequest::set_ciphertexts(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:aesburst.BruteForceRequest.ciphertexts)
  ciphertexts_.Mutable(index)->assign(std::move(value));
}
#endif
inline void BruteForceRequest::set_ciphertexts(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ciphertexts_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:aesburst.BruteForceRequest.ciphertexts)
}
inline void BruteForceRequest::set_ciphertexts(int index, const void* value, size_t size) {
  ciphertexts_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:aesburst.BruteForceRequest.ciphertexts)
}
inline ::std::string* BruteForceRequest::add_ciphertexts() {
  // @@protoc_insertion_point(field_add_mutable:aesburst.BruteForceRequest.ciphertexts)
  return ciphertexts_.Add();
}
inline void BruteForceRequest::add_ciphertexts(const ::std::string& value) {
  ciphertexts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:aesburst.BruteForceRequest.ciphertexts)
}
#if LANG_CXX11
inline void BruteForceRequest::add_ciphertexts(::std::string&& value) {
  ciphertexts_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:aesburst.BruteForceRequest.ciphertexts)
}
#endif
inline void BruteForceRequest::add_ciphertexts(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ciphertexts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:aesburst.BruteForceRequest.ciphertexts)
}
inline void BruteForceRequest::add_ciphertexts(const void* value, size_t size) {
  ciphertexts_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:aesburst.BruteForceRequest.ciphertexts)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
BruteForceRequest::ciphertexts() const {
  // @@protoc_insertion_point(field_list:aesburst.BruteForceRequest.ciphertexts)
  return ciphertexts_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
BruteForceRequest::mutable_ciphertexts() {
  // @@protoc_insertion_point(field_mutable_list:aesburst.BruteForceRequest.ciphertexts)
  return &ciphertexts_;
}

// repeated bytes keys = 5;
inline int BruteForceRequest::keys_size() const {
  return keys_.size();
}
inline void BruteForceRequest::clear_keys() {
  keys_.Clear();
}
inline const ::std::string& BruteForceRequest::keys(int index) const {
  // @@protoc_insertion_point(field_get:aesburst.BruteForceRequest.keys)
  return keys_.Get(index);
}
inline ::std::string* BruteForceRequest::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:aesburst.BruteForceRequest.keys)
  return keys_.Mutable(index);
}
inline void BruteForceRequest::set_keys(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:aesburst.BruteForceRequest.keys)
  keys_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void BruteForceRequest::set_keys(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:aesburst.BruteForceRequest.keys)
  keys_.Mutable(index)->assign(std::move(value));
}
#endif
inline void BruteForceRequest::set_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:aesburst.BruteForceRequest.keys)
}
inline void BruteForceRequest::set_keys(int index, const void* value, size_t size) {
  keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:aesburst.BruteForceRequest.keys)
}
inline ::std::string* BruteForceRequest::add_keys() {
  // @@protoc_insertion_point(field_add_mutable:aesburst.BruteForceRequest.keys)
  return keys_.Add();
}
inline void BruteForceRequest::add_keys(const ::std::string& value) {
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:aesburst.BruteForceRequest.keys)
}
#if LANG_CXX11
inline void BruteForceRequest::add_keys(::std::string&& value) {
  keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:aesburst.BruteForceRequest.keys)
}
#endif
inline void BruteForceRequest::add_keys(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:aesburst.BruteForceRequest.keys)
}
inline void BruteForceRequest::add_keys(const void* value, size_t size) {
  keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:aesburst.BruteForceRequest.keys)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
BruteForceRequest::keys() const {
  // @@protoc_insertion_point(field_list:aesburst.BruteForceRequest.keys)
  return keys_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
BruteForceRequest::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:aesburst.BruteForceRequest.keys)
  return &keys_;
}

// -------------------------------------------------------------------

// BruteForceReply

// repeated bytes candidate_keys = 1;
inline int BruteForceReply::candidate_keys_size() const {
  return candidate_keys_.size();
}
inline void BruteForceReply::clear_candidate_keys() {
  candidate_keys_.Clear();
}
inline const ::std::string& BruteForceReply::candidate_keys(int index) const {
  // @@protoc_insertion_point(field_get:aesburst.BruteForceReply.candidate_keys)
  return candidate_keys_.Get(index);
}
inline ::std::string* BruteForceReply::mutable_candidate_keys(int index) {
  // @@protoc_insertion_point(field_mutable:aesburst.BruteForceReply.candidate_keys)
  return candidate_keys_.Mutable(index);
}
inline void BruteForceReply::set_candidate_keys(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:aesburst.BruteForceReply.candidate_keys)
  candidate_keys_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void BruteForceReply::set_candidate_keys(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:aesburst.BruteForceReply.candidate_keys)
  candidate_keys_.Mutable(index)->assign(std::move(value));
}
#endif
inline void BruteForceReply::set_candidate_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  candidate_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:aesburst.BruteForceReply.candidate_keys)
}
inline void BruteForceReply::set_candidate_keys(int index, const void* value, size_t size) {
  candidate_keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:aesburst.BruteForceReply.candidate_keys)
}
inline ::std::string* BruteForceReply::add_candidate_keys() {
  // @@protoc_insertion_point(field_add_mutable:aesburst.BruteForceReply.candidate_keys)
  return candidate_keys_.Add();
}
inline void BruteForceReply::add_candidate_keys(const ::std::string& value) {
  candidate_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:aesburst.BruteForceReply.candidate_keys)
}
#if LANG_CXX11
inline void BruteForceReply::add_candidate_keys(::std::string&& value) {
  candidate_keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:aesburst.BruteForceReply.candidate_keys)
}
#endif
inline void BruteForceReply::add_candidate_keys(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  candidate_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:aesburst.BruteForceReply.candidate_keys)
}
inline void BruteForceReply::add_candidate_keys(const void* value, size_t size) {
  candidate_keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:aesburst.BruteForceReply.candidate_keys)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
BruteForceReply::candidate_keys() const {
  // @@protoc_insertion_point(field_list:aesburst.BruteForceReply.candidate_keys)
  return candidate_keys_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
BruteForceReply::mutable_candidate_keys() {
  // @@protoc_insertion_point(field_mutable_list:aesburst.BruteForceReply.candidate_keys)
  return &candidate_keys_;
}

// -------------------------------------------------------------------

// PartialBruteRequest

// string crib = 1;
inline void PartialBruteRequest::clear_crib() {
  crib_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PartialBruteRequest::crib() const {
  // @@protoc_insertion_point(field_get:aesburst.PartialBruteRequest.crib)
  return crib_.GetNoArena();
}
inline void PartialBruteRequest::set_crib(const ::std::string& value) {
  
  crib_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aesburst.PartialBruteRequest.crib)
}
#if LANG_CXX11
inline void PartialBruteRequest::set_crib(::std::string&& value) {
  
  crib_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aesburst.PartialBruteRequest.crib)
}
#endif
inline void PartialBruteRequest::set_crib(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  crib_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aesburst.PartialBruteRequest.crib)
}
inline void PartialBruteRequest::set_crib(const char* value, size_t size) {
  
  crib_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aesburst.PartialBruteRequest.crib)
}
inline ::std::string* PartialBruteRequest::mutable_crib() {
  
  // @@protoc_insertion_point(field_mutable:aesburst.PartialBruteRequest.crib)
  return crib_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PartialBruteRequest::release_crib() {
  // @@protoc_insertion_point(field_release:aesburst.PartialBruteRequest.crib)
  
  return crib_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PartialBruteRequest::set_allocated_crib(::std::string* crib) {
  if (crib != nullptr) {
    
  } else {
    
  }
  crib_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), crib);
  // @@protoc_insertion_point(field_set_allocated:aesburst.PartialBruteRequest.crib)
}

// repeated bytes keys = 2;
inline int PartialBruteRequest::keys_size() const {
  return keys_.size();
}
inline void PartialBruteRequest::clear_keys() {
  keys_.Clear();
}
inline const ::std::string& PartialBruteRequest::keys(int index) const {
  // @@protoc_insertion_point(field_get:aesburst.PartialBruteRequest.keys)
  return keys_.Get(index);
}
inline ::std::string* PartialBruteRequest::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:aesburst.PartialBruteRequest.keys)
  return keys_.Mutable(index);
}
inline void PartialBruteRequest::set_keys(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:aesburst.PartialBruteRequest.keys)
  keys_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void PartialBruteRequest::set_keys(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:aesburst.PartialBruteRequest.keys)
  keys_.Mutable(index)->assign(std::move(value));
}
#endif
inline void PartialBruteRequest::set_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:aesburst.PartialBruteRequest.keys)
}
inline void PartialBruteRequest::set_keys(int index, const void* value, size_t size) {
  keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:aesburst.PartialBruteRequest.keys)
}
inline ::std::string* PartialBruteRequest::add_keys() {
  // @@protoc_insertion_point(field_add_mutable:aesburst.PartialBruteRequest.keys)
  return keys_.Add();
}
inline void PartialBruteRequest::add_keys(const ::std::string& value) {
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:aesburst.PartialBruteRequest.keys)
}
#if LANG_CXX11
inline void PartialBruteRequest::add_keys(::std::string&& value) {
  keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:aesburst.PartialBruteRequest.keys)
}
#endif
inline void PartialBruteRequest::add_keys(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:aesburst.PartialBruteRequest.keys)
}
inline void PartialBruteRequest::add_keys(const void* value, size_t size) {
  keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:aesburst.PartialBruteRequest.keys)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
PartialBruteRequest::keys() const {
  // @@protoc_insertion_point(field_list:aesburst.PartialBruteRequest.keys)
  return keys_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
PartialBruteRequest::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:aesburst.PartialBruteRequest.keys)
  return &keys_;
}

// repeated bytes ciphertexts = 3;
inline int PartialBruteRequest::ciphertexts_size() const {
  return ciphertexts_.size();
}
inline void PartialBruteRequest::clear_ciphertexts() {
  ciphertexts_.Clear();
}
inline const ::std::string& PartialBruteRequest::ciphertexts(int index) const {
  // @@protoc_insertion_point(field_get:aesburst.PartialBruteRequest.ciphertexts)
  return ciphertexts_.Get(index);
}
inline ::std::string* PartialBruteRequest::mutable_ciphertexts(int index) {
  // @@protoc_insertion_point(field_mutable:aesburst.PartialBruteRequest.ciphertexts)
  return ciphertexts_.Mutable(index);
}
inline void PartialBruteRequest::set_ciphertexts(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:aesburst.PartialBruteRequest.ciphertexts)
  ciphertexts_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void PartialBruteRequest::set_ciphertexts(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:aesburst.PartialBruteRequest.ciphertexts)
  ciphertexts_.Mutable(index)->assign(std::move(value));
}
#endif
inline void PartialBruteRequest::set_ciphertexts(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ciphertexts_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:aesburst.PartialBruteRequest.ciphertexts)
}
inline void PartialBruteRequest::set_ciphertexts(int index, const void* value, size_t size) {
  ciphertexts_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:aesburst.PartialBruteRequest.ciphertexts)
}
inline ::std::string* PartialBruteRequest::add_ciphertexts() {
  // @@protoc_insertion_point(field_add_mutable:aesburst.PartialBruteRequest.ciphertexts)
  return ciphertexts_.Add();
}
inline void PartialBruteRequest::add_ciphertexts(const ::std::string& value) {
  ciphertexts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:aesburst.PartialBruteRequest.ciphertexts)
}
#if LANG_CXX11
inline void PartialBruteRequest::add_ciphertexts(::std::string&& value) {
  ciphertexts_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:aesburst.PartialBruteRequest.ciphertexts)
}
#endif
inline void PartialBruteRequest::add_ciphertexts(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ciphertexts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:aesburst.PartialBruteRequest.ciphertexts)
}
inline void PartialBruteRequest::add_ciphertexts(const void* value, size_t size) {
  ciphertexts_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:aesburst.PartialBruteRequest.ciphertexts)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
PartialBruteRequest::ciphertexts() const {
  // @@protoc_insertion_point(field_list:aesburst.PartialBruteRequest.ciphertexts)
  return ciphertexts_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
PartialBruteRequest::mutable_ciphertexts() {
  // @@protoc_insertion_point(field_mutable_list:aesburst.PartialBruteRequest.ciphertexts)
  return &ciphertexts_;
}

// -------------------------------------------------------------------

// PartialBruteReply

// repeated bytes partial_candidate_keys = 1;
inline int PartialBruteReply::partial_candidate_keys_size() const {
  return partial_candidate_keys_.size();
}
inline void PartialBruteReply::clear_partial_candidate_keys() {
  partial_candidate_keys_.Clear();
}
inline const ::std::string& PartialBruteReply::partial_candidate_keys(int index) const {
  // @@protoc_insertion_point(field_get:aesburst.PartialBruteReply.partial_candidate_keys)
  return partial_candidate_keys_.Get(index);
}
inline ::std::string* PartialBruteReply::mutable_partial_candidate_keys(int index) {
  // @@protoc_insertion_point(field_mutable:aesburst.PartialBruteReply.partial_candidate_keys)
  return partial_candidate_keys_.Mutable(index);
}
inline void PartialBruteReply::set_partial_candidate_keys(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:aesburst.PartialBruteReply.partial_candidate_keys)
  partial_candidate_keys_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void PartialBruteReply::set_partial_candidate_keys(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:aesburst.PartialBruteReply.partial_candidate_keys)
  partial_candidate_keys_.Mutable(index)->assign(std::move(value));
}
#endif
inline void PartialBruteReply::set_partial_candidate_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  partial_candidate_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:aesburst.PartialBruteReply.partial_candidate_keys)
}
inline void PartialBruteReply::set_partial_candidate_keys(int index, const void* value, size_t size) {
  partial_candidate_keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:aesburst.PartialBruteReply.partial_candidate_keys)
}
inline ::std::string* PartialBruteReply::add_partial_candidate_keys() {
  // @@protoc_insertion_point(field_add_mutable:aesburst.PartialBruteReply.partial_candidate_keys)
  return partial_candidate_keys_.Add();
}
inline void PartialBruteReply::add_partial_candidate_keys(const ::std::string& value) {
  partial_candidate_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:aesburst.PartialBruteReply.partial_candidate_keys)
}
#if LANG_CXX11
inline void PartialBruteReply::add_partial_candidate_keys(::std::string&& value) {
  partial_candidate_keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:aesburst.PartialBruteReply.partial_candidate_keys)
}
#endif
inline void PartialBruteReply::add_partial_candidate_keys(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  partial_candidate_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:aesburst.PartialBruteReply.partial_candidate_keys)
}
inline void PartialBruteReply::add_partial_candidate_keys(const void* value, size_t size) {
  partial_candidate_keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:aesburst.PartialBruteReply.partial_candidate_keys)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
PartialBruteReply::partial_candidate_keys() const {
  // @@protoc_insertion_point(field_list:aesburst.PartialBruteReply.partial_candidate_keys)
  return partial_candidate_keys_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
PartialBruteReply::mutable_partial_candidate_keys() {
  // @@protoc_insertion_point(field_mutable_list:aesburst.PartialBruteReply.partial_candidate_keys)
  return &partial_candidate_keys_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace aesburst

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::aesburst::BruteForceRequest_Mode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::aesburst::BruteForceRequest_Mode>() {
  return ::aesburst::BruteForceRequest_Mode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_aesburst_2eproto
