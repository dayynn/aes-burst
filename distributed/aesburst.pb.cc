// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aesburst.proto

#include "aesburst.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

namespace aesburst {
class BruteForceRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BruteForceRequest> _instance;
} _BruteForceRequest_default_instance_;
class BruteForceReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BruteForceReply> _instance;
} _BruteForceReply_default_instance_;
class PartialBruteRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PartialBruteRequest> _instance;
} _PartialBruteRequest_default_instance_;
class PartialBruteReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PartialBruteReply> _instance;
} _PartialBruteReply_default_instance_;
}  // namespace aesburst
static void InitDefaultsBruteForceRequest_aesburst_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aesburst::_BruteForceRequest_default_instance_;
    new (ptr) ::aesburst::BruteForceRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aesburst::BruteForceRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BruteForceRequest_aesburst_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBruteForceRequest_aesburst_2eproto}, {}};

static void InitDefaultsBruteForceReply_aesburst_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aesburst::_BruteForceReply_default_instance_;
    new (ptr) ::aesburst::BruteForceReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aesburst::BruteForceReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BruteForceReply_aesburst_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBruteForceReply_aesburst_2eproto}, {}};

static void InitDefaultsPartialBruteRequest_aesburst_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aesburst::_PartialBruteRequest_default_instance_;
    new (ptr) ::aesburst::PartialBruteRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aesburst::PartialBruteRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PartialBruteRequest_aesburst_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPartialBruteRequest_aesburst_2eproto}, {}};

static void InitDefaultsPartialBruteReply_aesburst_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aesburst::_PartialBruteReply_default_instance_;
    new (ptr) ::aesburst::PartialBruteReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aesburst::PartialBruteReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PartialBruteReply_aesburst_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPartialBruteReply_aesburst_2eproto}, {}};

void InitDefaults_aesburst_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_BruteForceRequest_aesburst_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BruteForceReply_aesburst_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PartialBruteRequest_aesburst_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PartialBruteReply_aesburst_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_aesburst_2eproto[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_aesburst_2eproto[1];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_aesburst_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_aesburst_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aesburst::BruteForceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aesburst::BruteForceRequest, crib_),
  PROTOBUF_FIELD_OFFSET(::aesburst::BruteForceRequest, iv_),
  PROTOBUF_FIELD_OFFSET(::aesburst::BruteForceRequest, mode_),
  PROTOBUF_FIELD_OFFSET(::aesburst::BruteForceRequest, ciphertexts_),
  PROTOBUF_FIELD_OFFSET(::aesburst::BruteForceRequest, keys_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aesburst::BruteForceReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aesburst::BruteForceReply, candidate_keys_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aesburst::PartialBruteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aesburst::PartialBruteRequest, crib_),
  PROTOBUF_FIELD_OFFSET(::aesburst::PartialBruteRequest, keys_),
  PROTOBUF_FIELD_OFFSET(::aesburst::PartialBruteRequest, ciphertexts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aesburst::PartialBruteReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aesburst::PartialBruteReply, partial_candidate_keys_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::aesburst::BruteForceRequest)},
  { 10, -1, sizeof(::aesburst::BruteForceReply)},
  { 16, -1, sizeof(::aesburst::PartialBruteRequest)},
  { 24, -1, sizeof(::aesburst::PartialBruteReply)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::aesburst::_BruteForceRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::aesburst::_BruteForceReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::aesburst::_PartialBruteRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::aesburst::_PartialBruteReply_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_aesburst_2eproto = {
  {}, AddDescriptors_aesburst_2eproto, "aesburst.proto", schemas,
  file_default_instances, TableStruct_aesburst_2eproto::offsets,
  file_level_metadata_aesburst_2eproto, 4, file_level_enum_descriptors_aesburst_2eproto, file_level_service_descriptors_aesburst_2eproto,
};

const char descriptor_table_protodef_aesburst_2eproto[] =
  "\n\016aesburst.proto\022\010aesburst\"\254\001\n\021BruteForc"
  "eRequest\022\014\n\004crib\030\001 \001(\t\022\n\n\002iv\030\002 \001(\014\022.\n\004mo"
  "de\030\003 \001(\0162 .aesburst.BruteForceRequest.Mo"
  "de\022\023\n\013ciphertexts\030\004 \003(\014\022\014\n\004keys\030\005 \003(\014\"*\n"
  "\004Mode\022\007\n\003ECB\020\000\022\007\n\003CBC\020\001\022\007\n\003CTR\020\002\022\007\n\003ALL\020"
  "\003\")\n\017BruteForceReply\022\026\n\016candidate_keys\030\001"
  " \003(\014\"F\n\023PartialBruteRequest\022\014\n\004crib\030\001 \001("
  "\t\022\014\n\004keys\030\002 \003(\014\022\023\n\013ciphertexts\030\003 \003(\014\"3\n\021"
  "PartialBruteReply\022\036\n\026partial_candidate_k"
  "eys\030\001 \003(\0142Y\n\017AESBurstManager\022F\n\nBruteFor"
  "ce\022\033.aesburst.BruteForceRequest\032\031.aesbur"
  "st.BruteForceReply\"\0002\356\001\n\016AESBurstWorker\022"
  "H\n\010BruteECB\022\035.aesburst.PartialBruteReque"
  "st\032\033.aesburst.PartialBruteReply\"\000\022H\n\010Bru"
  "teCBC\022\035.aesburst.PartialBruteRequest\032\033.a"
  "esburst.PartialBruteReply\"\000\022H\n\010BruteCTR\022"
  "\035.aesburst.PartialBruteRequest\032\033.aesburs"
  "t.PartialBruteReply\"\000b\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_aesburst_2eproto = {
  false, InitDefaults_aesburst_2eproto, 
  descriptor_table_protodef_aesburst_2eproto,
  "aesburst.proto", &assign_descriptors_table_aesburst_2eproto, 709,
};

void AddDescriptors_aesburst_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_aesburst_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_aesburst_2eproto = []() { AddDescriptors_aesburst_2eproto(); return true; }();
namespace aesburst {
const ::google::protobuf::EnumDescriptor* BruteForceRequest_Mode_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_aesburst_2eproto);
  return file_level_enum_descriptors_aesburst_2eproto[0];
}
bool BruteForceRequest_Mode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BruteForceRequest_Mode BruteForceRequest::ECB;
const BruteForceRequest_Mode BruteForceRequest::CBC;
const BruteForceRequest_Mode BruteForceRequest::CTR;
const BruteForceRequest_Mode BruteForceRequest::ALL;
const BruteForceRequest_Mode BruteForceRequest::Mode_MIN;
const BruteForceRequest_Mode BruteForceRequest::Mode_MAX;
const int BruteForceRequest::Mode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void BruteForceRequest::InitAsDefaultInstance() {
}
class BruteForceRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BruteForceRequest::kCribFieldNumber;
const int BruteForceRequest::kIvFieldNumber;
const int BruteForceRequest::kModeFieldNumber;
const int BruteForceRequest::kCiphertextsFieldNumber;
const int BruteForceRequest::kKeysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BruteForceRequest::BruteForceRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesburst.BruteForceRequest)
}
BruteForceRequest::BruteForceRequest(const BruteForceRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      ciphertexts_(from.ciphertexts_),
      keys_(from.keys_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  crib_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.crib().size() > 0) {
    crib_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.crib_);
  }
  iv_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.iv().size() > 0) {
    iv_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.iv_);
  }
  mode_ = from.mode_;
  // @@protoc_insertion_point(copy_constructor:aesburst.BruteForceRequest)
}

void BruteForceRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_BruteForceRequest_aesburst_2eproto.base);
  crib_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iv_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mode_ = 0;
}

BruteForceRequest::~BruteForceRequest() {
  // @@protoc_insertion_point(destructor:aesburst.BruteForceRequest)
  SharedDtor();
}

void BruteForceRequest::SharedDtor() {
  crib_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iv_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BruteForceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BruteForceRequest& BruteForceRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BruteForceRequest_aesburst_2eproto.base);
  return *internal_default_instance();
}


void BruteForceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aesburst.BruteForceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ciphertexts_.Clear();
  keys_.Clear();
  crib_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iv_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mode_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BruteForceRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BruteForceRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string crib = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("aesburst.BruteForceRequest.crib");
        object = msg->mutable_crib();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bytes iv = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_iv();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .aesburst.BruteForceRequest.Mode mode = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_mode(static_cast<::aesburst::BruteForceRequest_Mode>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated bytes ciphertexts = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          object = msg->add_ciphertexts();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParser;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      // repeated bytes keys = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          object = msg->add_keys();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParser;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 42 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BruteForceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aesburst.BruteForceRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string crib = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_crib()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->crib().data(), static_cast<int>(this->crib().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aesburst.BruteForceRequest.crib"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes iv = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_iv()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aesburst.BruteForceRequest.Mode mode = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mode(static_cast< ::aesburst::BruteForceRequest_Mode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes ciphertexts = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_ciphertexts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes keys = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_keys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesburst.BruteForceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesburst.BruteForceRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BruteForceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesburst.BruteForceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string crib = 1;
  if (this->crib().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->crib().data(), static_cast<int>(this->crib().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aesburst.BruteForceRequest.crib");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->crib(), output);
  }

  // bytes iv = 2;
  if (this->iv().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->iv(), output);
  }

  // .aesburst.BruteForceRequest.Mode mode = 3;
  if (this->mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->mode(), output);
  }

  // repeated bytes ciphertexts = 4;
  for (int i = 0, n = this->ciphertexts_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->ciphertexts(i), output);
  }

  // repeated bytes keys = 5;
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->keys(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aesburst.BruteForceRequest)
}

::google::protobuf::uint8* BruteForceRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesburst.BruteForceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string crib = 1;
  if (this->crib().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->crib().data(), static_cast<int>(this->crib().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aesburst.BruteForceRequest.crib");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->crib(), target);
  }

  // bytes iv = 2;
  if (this->iv().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->iv(), target);
  }

  // .aesburst.BruteForceRequest.Mode mode = 3;
  if (this->mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->mode(), target);
  }

  // repeated bytes ciphertexts = 4;
  for (int i = 0, n = this->ciphertexts_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(4, this->ciphertexts(i), target);
  }

  // repeated bytes keys = 5;
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(5, this->keys(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesburst.BruteForceRequest)
  return target;
}

size_t BruteForceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aesburst.BruteForceRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes ciphertexts = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->ciphertexts_size());
  for (int i = 0, n = this->ciphertexts_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->ciphertexts(i));
  }

  // repeated bytes keys = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->keys_size());
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->keys(i));
  }

  // string crib = 1;
  if (this->crib().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->crib());
  }

  // bytes iv = 2;
  if (this->iv().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->iv());
  }

  // .aesburst.BruteForceRequest.Mode mode = 3;
  if (this->mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BruteForceRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aesburst.BruteForceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BruteForceRequest* source =
      ::google::protobuf::DynamicCastToGenerated<BruteForceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aesburst.BruteForceRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aesburst.BruteForceRequest)
    MergeFrom(*source);
  }
}

void BruteForceRequest::MergeFrom(const BruteForceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesburst.BruteForceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ciphertexts_.MergeFrom(from.ciphertexts_);
  keys_.MergeFrom(from.keys_);
  if (from.crib().size() > 0) {

    crib_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.crib_);
  }
  if (from.iv().size() > 0) {

    iv_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.iv_);
  }
  if (from.mode() != 0) {
    set_mode(from.mode());
  }
}

void BruteForceRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aesburst.BruteForceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BruteForceRequest::CopyFrom(const BruteForceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesburst.BruteForceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BruteForceRequest::IsInitialized() const {
  return true;
}

void BruteForceRequest::Swap(BruteForceRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BruteForceRequest::InternalSwap(BruteForceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ciphertexts_.InternalSwap(CastToBase(&other->ciphertexts_));
  keys_.InternalSwap(CastToBase(&other->keys_));
  crib_.Swap(&other->crib_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  iv_.Swap(&other->iv_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(mode_, other->mode_);
}

::google::protobuf::Metadata BruteForceRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_aesburst_2eproto);
  return ::file_level_metadata_aesburst_2eproto[kIndexInFileMessages];
}


// ===================================================================

void BruteForceReply::InitAsDefaultInstance() {
}
class BruteForceReply::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BruteForceReply::kCandidateKeysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BruteForceReply::BruteForceReply()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesburst.BruteForceReply)
}
BruteForceReply::BruteForceReply(const BruteForceReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      candidate_keys_(from.candidate_keys_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aesburst.BruteForceReply)
}

void BruteForceReply::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_BruteForceReply_aesburst_2eproto.base);
}

BruteForceReply::~BruteForceReply() {
  // @@protoc_insertion_point(destructor:aesburst.BruteForceReply)
  SharedDtor();
}

void BruteForceReply::SharedDtor() {
}

void BruteForceReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BruteForceReply& BruteForceReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BruteForceReply_aesburst_2eproto.base);
  return *internal_default_instance();
}


void BruteForceReply::Clear() {
// @@protoc_insertion_point(message_clear_start:aesburst.BruteForceReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  candidate_keys_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BruteForceReply::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BruteForceReply*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated bytes candidate_keys = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          object = msg->add_candidate_keys();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParser;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BruteForceReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aesburst.BruteForceReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes candidate_keys = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_candidate_keys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesburst.BruteForceReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesburst.BruteForceReply)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BruteForceReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesburst.BruteForceReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes candidate_keys = 1;
  for (int i = 0, n = this->candidate_keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->candidate_keys(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aesburst.BruteForceReply)
}

::google::protobuf::uint8* BruteForceReply::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesburst.BruteForceReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes candidate_keys = 1;
  for (int i = 0, n = this->candidate_keys_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->candidate_keys(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesburst.BruteForceReply)
  return target;
}

size_t BruteForceReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aesburst.BruteForceReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes candidate_keys = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->candidate_keys_size());
  for (int i = 0, n = this->candidate_keys_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->candidate_keys(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BruteForceReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aesburst.BruteForceReply)
  GOOGLE_DCHECK_NE(&from, this);
  const BruteForceReply* source =
      ::google::protobuf::DynamicCastToGenerated<BruteForceReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aesburst.BruteForceReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aesburst.BruteForceReply)
    MergeFrom(*source);
  }
}

void BruteForceReply::MergeFrom(const BruteForceReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesburst.BruteForceReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  candidate_keys_.MergeFrom(from.candidate_keys_);
}

void BruteForceReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aesburst.BruteForceReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BruteForceReply::CopyFrom(const BruteForceReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesburst.BruteForceReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BruteForceReply::IsInitialized() const {
  return true;
}

void BruteForceReply::Swap(BruteForceReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BruteForceReply::InternalSwap(BruteForceReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  candidate_keys_.InternalSwap(CastToBase(&other->candidate_keys_));
}

::google::protobuf::Metadata BruteForceReply::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_aesburst_2eproto);
  return ::file_level_metadata_aesburst_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PartialBruteRequest::InitAsDefaultInstance() {
}
class PartialBruteRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PartialBruteRequest::kCribFieldNumber;
const int PartialBruteRequest::kKeysFieldNumber;
const int PartialBruteRequest::kCiphertextsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PartialBruteRequest::PartialBruteRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesburst.PartialBruteRequest)
}
PartialBruteRequest::PartialBruteRequest(const PartialBruteRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      keys_(from.keys_),
      ciphertexts_(from.ciphertexts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  crib_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.crib().size() > 0) {
    crib_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.crib_);
  }
  // @@protoc_insertion_point(copy_constructor:aesburst.PartialBruteRequest)
}

void PartialBruteRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PartialBruteRequest_aesburst_2eproto.base);
  crib_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PartialBruteRequest::~PartialBruteRequest() {
  // @@protoc_insertion_point(destructor:aesburst.PartialBruteRequest)
  SharedDtor();
}

void PartialBruteRequest::SharedDtor() {
  crib_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PartialBruteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PartialBruteRequest& PartialBruteRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PartialBruteRequest_aesburst_2eproto.base);
  return *internal_default_instance();
}


void PartialBruteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aesburst.PartialBruteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_.Clear();
  ciphertexts_.Clear();
  crib_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PartialBruteRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PartialBruteRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string crib = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("aesburst.PartialBruteRequest.crib");
        object = msg->mutable_crib();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated bytes keys = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          object = msg->add_keys();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParser;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // repeated bytes ciphertexts = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          object = msg->add_ciphertexts();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParser;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PartialBruteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aesburst.PartialBruteRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string crib = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_crib()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->crib().data(), static_cast<int>(this->crib().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "aesburst.PartialBruteRequest.crib"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes keys = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_keys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes ciphertexts = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_ciphertexts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesburst.PartialBruteRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesburst.PartialBruteRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PartialBruteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesburst.PartialBruteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string crib = 1;
  if (this->crib().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->crib().data(), static_cast<int>(this->crib().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aesburst.PartialBruteRequest.crib");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->crib(), output);
  }

  // repeated bytes keys = 2;
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->keys(i), output);
  }

  // repeated bytes ciphertexts = 3;
  for (int i = 0, n = this->ciphertexts_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->ciphertexts(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aesburst.PartialBruteRequest)
}

::google::protobuf::uint8* PartialBruteRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesburst.PartialBruteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string crib = 1;
  if (this->crib().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->crib().data(), static_cast<int>(this->crib().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "aesburst.PartialBruteRequest.crib");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->crib(), target);
  }

  // repeated bytes keys = 2;
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->keys(i), target);
  }

  // repeated bytes ciphertexts = 3;
  for (int i = 0, n = this->ciphertexts_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(3, this->ciphertexts(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesburst.PartialBruteRequest)
  return target;
}

size_t PartialBruteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aesburst.PartialBruteRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes keys = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->keys_size());
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->keys(i));
  }

  // repeated bytes ciphertexts = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->ciphertexts_size());
  for (int i = 0, n = this->ciphertexts_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->ciphertexts(i));
  }

  // string crib = 1;
  if (this->crib().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->crib());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PartialBruteRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aesburst.PartialBruteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PartialBruteRequest* source =
      ::google::protobuf::DynamicCastToGenerated<PartialBruteRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aesburst.PartialBruteRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aesburst.PartialBruteRequest)
    MergeFrom(*source);
  }
}

void PartialBruteRequest::MergeFrom(const PartialBruteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesburst.PartialBruteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
  ciphertexts_.MergeFrom(from.ciphertexts_);
  if (from.crib().size() > 0) {

    crib_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.crib_);
  }
}

void PartialBruteRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aesburst.PartialBruteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartialBruteRequest::CopyFrom(const PartialBruteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesburst.PartialBruteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartialBruteRequest::IsInitialized() const {
  return true;
}

void PartialBruteRequest::Swap(PartialBruteRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PartialBruteRequest::InternalSwap(PartialBruteRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  keys_.InternalSwap(CastToBase(&other->keys_));
  ciphertexts_.InternalSwap(CastToBase(&other->ciphertexts_));
  crib_.Swap(&other->crib_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata PartialBruteRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_aesburst_2eproto);
  return ::file_level_metadata_aesburst_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PartialBruteReply::InitAsDefaultInstance() {
}
class PartialBruteReply::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PartialBruteReply::kPartialCandidateKeysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PartialBruteReply::PartialBruteReply()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesburst.PartialBruteReply)
}
PartialBruteReply::PartialBruteReply(const PartialBruteReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      partial_candidate_keys_(from.partial_candidate_keys_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aesburst.PartialBruteReply)
}

void PartialBruteReply::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PartialBruteReply_aesburst_2eproto.base);
}

PartialBruteReply::~PartialBruteReply() {
  // @@protoc_insertion_point(destructor:aesburst.PartialBruteReply)
  SharedDtor();
}

void PartialBruteReply::SharedDtor() {
}

void PartialBruteReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PartialBruteReply& PartialBruteReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PartialBruteReply_aesburst_2eproto.base);
  return *internal_default_instance();
}


void PartialBruteReply::Clear() {
// @@protoc_insertion_point(message_clear_start:aesburst.PartialBruteReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  partial_candidate_keys_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PartialBruteReply::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PartialBruteReply*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated bytes partial_candidate_keys = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          object = msg->add_partial_candidate_keys();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParser;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PartialBruteReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aesburst.PartialBruteReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes partial_candidate_keys = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_partial_candidate_keys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesburst.PartialBruteReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesburst.PartialBruteReply)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PartialBruteReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesburst.PartialBruteReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes partial_candidate_keys = 1;
  for (int i = 0, n = this->partial_candidate_keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->partial_candidate_keys(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aesburst.PartialBruteReply)
}

::google::protobuf::uint8* PartialBruteReply::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesburst.PartialBruteReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes partial_candidate_keys = 1;
  for (int i = 0, n = this->partial_candidate_keys_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->partial_candidate_keys(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesburst.PartialBruteReply)
  return target;
}

size_t PartialBruteReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aesburst.PartialBruteReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes partial_candidate_keys = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->partial_candidate_keys_size());
  for (int i = 0, n = this->partial_candidate_keys_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->partial_candidate_keys(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PartialBruteReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aesburst.PartialBruteReply)
  GOOGLE_DCHECK_NE(&from, this);
  const PartialBruteReply* source =
      ::google::protobuf::DynamicCastToGenerated<PartialBruteReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aesburst.PartialBruteReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aesburst.PartialBruteReply)
    MergeFrom(*source);
  }
}

void PartialBruteReply::MergeFrom(const PartialBruteReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aesburst.PartialBruteReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  partial_candidate_keys_.MergeFrom(from.partial_candidate_keys_);
}

void PartialBruteReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aesburst.PartialBruteReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartialBruteReply::CopyFrom(const PartialBruteReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aesburst.PartialBruteReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartialBruteReply::IsInitialized() const {
  return true;
}

void PartialBruteReply::Swap(PartialBruteReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PartialBruteReply::InternalSwap(PartialBruteReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  partial_candidate_keys_.InternalSwap(CastToBase(&other->partial_candidate_keys_));
}

::google::protobuf::Metadata PartialBruteReply::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_aesburst_2eproto);
  return ::file_level_metadata_aesburst_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace aesburst
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::aesburst::BruteForceRequest* Arena::CreateMaybeMessage< ::aesburst::BruteForceRequest >(Arena* arena) {
  return Arena::CreateInternal< ::aesburst::BruteForceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::aesburst::BruteForceReply* Arena::CreateMaybeMessage< ::aesburst::BruteForceReply >(Arena* arena) {
  return Arena::CreateInternal< ::aesburst::BruteForceReply >(arena);
}
template<> PROTOBUF_NOINLINE ::aesburst::PartialBruteRequest* Arena::CreateMaybeMessage< ::aesburst::PartialBruteRequest >(Arena* arena) {
  return Arena::CreateInternal< ::aesburst::PartialBruteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::aesburst::PartialBruteReply* Arena::CreateMaybeMessage< ::aesburst::PartialBruteReply >(Arena* arena) {
  return Arena::CreateInternal< ::aesburst::PartialBruteReply >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
